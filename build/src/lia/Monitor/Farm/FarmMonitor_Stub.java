// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package lia.Monitor.Farm;

public final class FarmMonitor_Stub
    extends java.rmi.server.RemoteStub
    implements lia.Monitor.monitor.MonitorUnit, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_ConfigAdd_0;
    private static java.lang.reflect.Method $method_ConfigRemove_1;
    private static java.lang.reflect.Method $method_getConfig_2;
    private static java.lang.reflect.Method $method_getUnitName_3;
    private static java.lang.reflect.Method $method_init_4;
    private static java.lang.reflect.Method $method_isVRVSFarm_5;
    private static java.lang.reflect.Method $method_remove_6;
    private static java.lang.reflect.Method $method_restartML_7;
    private static java.lang.reflect.Method $method_restartReflector_8;
    private static java.lang.reflect.Method $method_stopML_9;
    private static java.lang.reflect.Method $method_updateReflector_10;
    
    static {
	try {
	    $method_ConfigAdd_0 = lia.Monitor.monitor.MonitorUnit.class.getMethod("ConfigAdd", new java.lang.Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class, long.class});
	    $method_ConfigRemove_1 = lia.Monitor.monitor.MonitorUnit.class.getMethod("ConfigRemove", new java.lang.Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class});
	    $method_getConfig_2 = lia.Monitor.monitor.MonitorUnit.class.getMethod("getConfig", new java.lang.Class[] {});
	    $method_getUnitName_3 = lia.Monitor.monitor.MonitorUnit.class.getMethod("getUnitName", new java.lang.Class[] {});
	    $method_init_4 = lia.Monitor.monitor.MonitorUnit.class.getMethod("init", new java.lang.Class[] {});
	    $method_isVRVSFarm_5 = lia.Monitor.monitor.MonitorUnit.class.getMethod("isVRVSFarm", new java.lang.Class[] {});
	    $method_remove_6 = lia.Monitor.monitor.MonitorUnit.class.getMethod("remove", new java.lang.Class[] {java.lang.String.class});
	    $method_restartML_7 = lia.Monitor.monitor.MonitorUnit.class.getMethod("restartML", new java.lang.Class[] {});
	    $method_restartReflector_8 = lia.Monitor.monitor.MonitorUnit.class.getMethod("restartReflector", new java.lang.Class[] {});
	    $method_stopML_9 = lia.Monitor.monitor.MonitorUnit.class.getMethod("stopML", new java.lang.Class[] {});
	    $method_updateReflector_10 = lia.Monitor.monitor.MonitorUnit.class.getMethod("updateReflector", new java.lang.Class[] {});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public FarmMonitor_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of ConfigAdd(String, String, String, long)
    public java.lang.String ConfigAdd(java.lang.String $param_String_1, java.lang.String $param_String_2, java.lang.String $param_String_3, long $param_long_4)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_ConfigAdd_0, new java.lang.Object[] {$param_String_1, $param_String_2, $param_String_3, new java.lang.Long($param_long_4)}, 5171615736516861608L);
	    return ((java.lang.String) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of ConfigRemove(String, String, String)
    public java.lang.String ConfigRemove(java.lang.String $param_String_1, java.lang.String $param_String_2, java.lang.String $param_String_3)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_ConfigRemove_1, new java.lang.Object[] {$param_String_1, $param_String_2, $param_String_3}, 2668043442114276711L);
	    return ((java.lang.String) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getConfig()
    public java.util.Vector getConfig()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getConfig_2, null, 6742419975269720381L);
	    return ((java.util.Vector) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getUnitName()
    public java.lang.String getUnitName()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getUnitName_3, null, 9055428803389227394L);
	    return ((java.lang.String) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of init()
    public lia.Monitor.monitor.MFarm init()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_init_4, null, 5694320992901094620L);
	    return ((lia.Monitor.monitor.MFarm) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of isVRVSFarm()
    public boolean isVRVSFarm()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_isVRVSFarm_5, null, 5233268505718973538L);
	    return ((java.lang.Boolean) $result).booleanValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of remove(String)
    public void remove(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_remove_6, new java.lang.Object[] {$param_String_1}, -6694938420078092760L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of restartML()
    public void restartML()
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_restartML_7, null, -7334404033239493034L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of restartReflector()
    public java.lang.String restartReflector()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_restartReflector_8, null, 5250068737051061958L);
	    return ((java.lang.String) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of stopML()
    public void stopML()
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_stopML_9, null, 798379793577157655L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of updateReflector()
    public java.lang.String updateReflector()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_updateReflector_10, null, -8285504829797139484L);
	    return ((java.lang.String) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
