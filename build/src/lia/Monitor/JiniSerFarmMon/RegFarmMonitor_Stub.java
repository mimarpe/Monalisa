// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package lia.Monitor.JiniSerFarmMon;

public final class RegFarmMonitor_Stub
    extends java.rmi.server.RemoteStub
    implements lia.Monitor.monitor.DataStore, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_Register_0;
    private static java.lang.reflect.Method $method_Register_1;
    private static java.lang.reflect.Method $method_addFilter_2;
    private static java.lang.reflect.Method $method_confRegister_3;
    private static java.lang.reflect.Method $method_getFilterList_4;
    private static java.lang.reflect.Method $method_getIPAddress_5;
    private static java.lang.reflect.Method $method_getLocalTime_6;
    private static java.lang.reflect.Method $method_getUnitName_7;
    private static java.lang.reflect.Method $method_unRegister_8;
    private static java.lang.reflect.Method $method_unRegister_9;
    
    static {
	try {
	    $method_Register_0 = lia.Monitor.monitor.DataStore.class.getMethod("Register", new java.lang.Class[] {lia.Monitor.monitor.MonitorClient.class, java.lang.String.class});
	    $method_Register_1 = lia.Monitor.monitor.DataStore.class.getMethod("Register", new java.lang.Class[] {lia.Monitor.monitor.MonitorClient.class, lia.Monitor.monitor.monPredicate.class});
	    $method_addFilter_2 = lia.Monitor.monitor.DataStore.class.getMethod("addFilter", new java.lang.Class[] {lia.Monitor.monitor.MonitorFilter.class});
	    $method_confRegister_3 = lia.Monitor.monitor.DataStore.class.getMethod("confRegister", new java.lang.Class[] {lia.Monitor.monitor.MonitorClient.class});
	    $method_getFilterList_4 = lia.Monitor.monitor.DataStore.class.getMethod("getFilterList", new java.lang.Class[] {});
	    $method_getIPAddress_5 = lia.Monitor.monitor.DataStore.class.getMethod("getIPAddress", new java.lang.Class[] {});
	    $method_getLocalTime_6 = lia.Monitor.monitor.DataStore.class.getMethod("getLocalTime", new java.lang.Class[] {});
	    $method_getUnitName_7 = lia.Monitor.monitor.DataStore.class.getMethod("getUnitName", new java.lang.Class[] {});
	    $method_unRegister_8 = lia.Monitor.monitor.DataStore.class.getMethod("unRegister", new java.lang.Class[] {lia.Monitor.monitor.MonitorClient.class});
	    $method_unRegister_9 = lia.Monitor.monitor.DataStore.class.getMethod("unRegister", new java.lang.Class[] {lia.Monitor.monitor.MonitorClient.class, java.lang.Integer.class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public RegFarmMonitor_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of Register(MonitorClient, String)
    public void Register(lia.Monitor.monitor.MonitorClient $param_MonitorClient_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_Register_0, new java.lang.Object[] {$param_MonitorClient_1, $param_String_2}, -2393347536172181388L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of Register(MonitorClient, monPredicate)
    public void Register(lia.Monitor.monitor.MonitorClient $param_MonitorClient_1, lia.Monitor.monitor.monPredicate $param_monPredicate_2)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_Register_1, new java.lang.Object[] {$param_MonitorClient_1, $param_monPredicate_2}, 4700401775493236850L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of addFilter(MonitorFilter)
    public void addFilter(lia.Monitor.monitor.MonitorFilter $param_MonitorFilter_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_addFilter_2, new java.lang.Object[] {$param_MonitorFilter_1}, 296828435232923517L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of confRegister(MonitorClient)
    public lia.Monitor.monitor.MFarm confRegister(lia.Monitor.monitor.MonitorClient $param_MonitorClient_1)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_confRegister_3, new java.lang.Object[] {$param_MonitorClient_1}, 6660506365679599452L);
	    return ((lia.Monitor.monitor.MFarm) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getFilterList()
    public java.lang.String[] getFilterList()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getFilterList_4, null, 9115124459166014240L);
	    return ((java.lang.String[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getIPAddress()
    public java.lang.String getIPAddress()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getIPAddress_5, null, -8180877467200576021L);
	    return ((java.lang.String) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getLocalTime()
    public java.lang.String getLocalTime()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getLocalTime_6, null, 2224529674768216376L);
	    return ((java.lang.String) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getUnitName()
    public java.lang.String getUnitName()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getUnitName_7, null, 9055428803389227394L);
	    return ((java.lang.String) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of unRegister(MonitorClient)
    public void unRegister(lia.Monitor.monitor.MonitorClient $param_MonitorClient_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_unRegister_8, new java.lang.Object[] {$param_MonitorClient_1}, -7830165697773877108L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of unRegister(MonitorClient, Integer)
    public void unRegister(lia.Monitor.monitor.MonitorClient $param_MonitorClient_1, java.lang.Integer $param_Integer_2)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_unRegister_9, new java.lang.Object[] {$param_MonitorClient_1, $param_Integer_2}, -2567556535691453523L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
